/*-------- public -----------*/

function mdTabSelect(iv_id){
    //this is only used to preview mdtab selection
    //user should place cursor within markdown table
    var rtv=0;

    var lv_txt=document.getElementById(iv_id).value;
    var lv_p=mdTabGetCursorPos(iv_id);

    var lv_p_tab_start=mdTabScanUp(lv_txt,lv_p);
    var lv_p_tab_end=mdTabScanDown(lv_txt,lv_p);
    
    if(lv_p_tab_start>=0 && lv_p_tab_end>0){
        mdTabSetCursorSelRange(iv_id,lv_p_tab_start,lv_p_tab_end+1);
    }else{
        rtv=-1;
    }

    return rtv;

}
  
function mdTabFormat(iv_id){
    //user should place cursor within markdown table
    var rtv=0;

    var lo_ta=document.getElementById(iv_id);
    var lv_txt=lo_ta.value;
    var lv_p=mdTabGetCursorPos(iv_id);

    var lv_p_tab_start=mdTabScanUp(lv_txt,lv_p);
    var lv_p_tab_end=mdTabScanDown(lv_txt,lv_p);
    
    if(lv_p_tab_start>=0 && lv_p_tab_end>0){
        var lv_str1=lv_txt.substring(0,lv_p_tab_start);
        var lv_str2=lv_txt.substring(lv_p_tab_start,lv_p_tab_end+1);
        var lv_str3=lv_txt.substring(lv_p_tab_end+1,lv_txt.length);

        var lv_str2_formatted=mdTabProcessFormat(lv_str2);

        //removed additional \n generated by formatter
        if(lv_str2_formatted.substring(lv_str2_formatted.length-1,lv_str2_formatted.length=="\n"))
        lv_str2_formatted=lv_str2_formatted.substring(0,lv_str2_formatted.length-1);

        lo_ta.value=lv_str1+lv_str2_formatted+lv_str3;
    }else{
        rtv = -1;
    }

    return rtv;
}

/*-------- private -----------*/
function mdTabProcessFormat(iv){
    //include: MarkdownTableFormatter.js

    var lo = new MarkdownTableFormatter();
    lo.format_table(iv);
    return lo.output_table;
}

//textarea cursor ops:
function mdTabGetCursorPos(iv_id){
    return document.getElementById(iv_id).selectionStart;
}
function mdTabSetCursorSelRange(iv_id,iv_start,iv_end){
    var lo=document.getElementById(iv_id);
    lo.select();
    lo.selectionStart=iv_start;
    lo.selectionEnd=iv_end;
}

//text scan ops:
/*
logic (of scan up or scan down, just same):
    check each new-line char:
        char before new-line should be "|", if not, invalid md-tab
        char after new-line:
            "|", within table, continue checking
            not "|", head of table, position acquired

    note: appending additional new-line,
          in case of the md-table is at beginning or last of entire content
*/
function mdTabScanUp(iv_text,iv_startPos){
    if(iv_startPos>iv_text.length) return -1; //error

    var rtv=-1;

    var lv_curr="";
    var lv_prev="";
    var lv_next="";
    var lv_text="\n"+iv_text;  //append additional new-line at 1st char
    var lv_p=iv_startPos+1;

    //begin scan, scan is backwards!
    for(var i=lv_p;i>=0;i--){
        lv_curr=lv_text.substring(i,i+1)
        if(lv_prev!=""){//start checking on 2nd loop where lv_prev has value
            if(lv_curr=="\n"){
                //new line pos, verify tab first (pref should be "|"):
                if(lv_prev=="|"){
                    //check if 1st char
                    if(i==0){
                        rtv=i;
                    }else{
                        lv_next=lv_text.substring(i-1,i);
                        if(lv_next=="|") ;//still in tab, continue
                        else{
                            rtv=i;
                            break;
                        }
                    }
                }else{
                    //invalid md tab
                    rtf = -1;
                    break;
                }
          
            } 
        }
        lv_prev=lv_curr;
    }

    return rtv;

}

function mdTabScanDown(iv_text,iv_startPos){
    if(iv_startPos>iv_text.length) return -1; //error

    var rtv=-1;

    var lv_curr="";
    var lv_prev="";
    var lv_next="";
    var lv_text=iv_text+"\n";  //append additional new-line at last char
    var lv_p=iv_startPos;

    for(var i=lv_p;i<lv_text.length;i++){
        lv_curr=lv_text.substring(i,i+1)
        if(lv_prev!=""){//start checking on 2nd loop where lv_prev has value
            if(lv_curr=="\n"){
                //new line pos, verify tab first (pref should be "|"):
                if(lv_prev=="|"){
                    //check if last char
                    if(i==lv_text.length-1){
                        rtv=i-1;
                    }else{
                        lv_next=lv_text.substring(i+1,i+2);
                        if(lv_next=="|") ;//still in tab, continue
                        else{
                            rtv=i-1;
                            break;
                        }
                    }
                }else{
                    //invalid md tab
                    rtf = -1;
                    break;
                }
            }
        }
        lv_prev=lv_curr;
    }

    return rtv;
}
/*-------- end -----------*/
  